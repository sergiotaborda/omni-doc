<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<div>
<div class="article">
<h1>Adapter</h1>
<div id="pages">
<h2 class="ttl">Objetivo</h2>
<p align="justify">
Permitir que um objeto seja utilizado através de um contrato diferente.
</p>


<h2 class="ttl">Propósito</h2>
<p align="justify">
<span class="pattern">Adapter</span> (Adaptador) é um padrão de projeto que permite que um objeto seja utilizado com  um contrato diferente <sup>[1]</sup> do seu. 
O contrato é o conjunto de métodos, parâmetros e funcionalidades públicos.
</p>
<p align="justify">
Muitas vezes você precisa utilizar um objeto de uma classe no lugar de um outro, mas os contratos dos objetos não são compatíveis. 
Modificar o objeto que você já possui pode não ser possível (porque é de terceiros, por exemplo) ou prático (as regras já implementadas são relativamente complexas).
</p>
<p align="justify">
O padrão propõe que se construa um novo objeto, o Adapter. Este objeto terá a interface que o programa precisa mas ele delegará todos os comandos para um outro objeto que tem um contrato diferente.
O <span class="pattern">Adapter</span> encapsula o objeto que realmente irá realizar o trabalho em uma interface compatível com a que o é esperada. Por este motivo o padrão <span class="pattern">Adapter</span> é também chamado de <strong>Wrapper</strong> ('que embrulha').
</p>

<h2 class="ttl">Implementação</h2>
<p align="justify">
O padrão <span class="pattern">Adapter</span> pode ser utilizando tanto quando o contrato original é especificada por uma classe java ou por uma interface. É mais fácil quando o contrato é definido por uma interface, porque desta forma você sabe que 
pode sempre criar um objeto com aquele contrato. Ao trabalhar com classes é mais complexo. Se a classe é final e não pode ser herdada criar um adaptador é impossível apenas usando a linguagem Java e terá que recorrer a bibliotecas 
avançadas de bytecode rewrite. Vejamos como seria a implementação quando o contrato é baseado em uma interface. Este é o caso mais comum.
</p>
<p align="justify">
Imaginemos que temos um objeto de uma classe chamada <code>BalanceCalculator </code> de um pacote legado que contém um  conjunto de regras valioso que não queremos reimplementar.
Este objeto tem o seguinte contrato
</p>
<div class="sourceCodeDisplay">
<pre class="brush: java; highlight: [];" name="source">

public class BalanceCalculator {

    // atributos e campos omitidos.
	
	public double calculateBalance(Integer account, Calendar date) {
	   // lógica omitida
	}

}

</pre>
<div class="legend">
		Código 1: </div>
</div>
<p align="justify">
Queremos usar esta classe em um novo projeto que contém um contrato utilizado pelo sistema para calculo de saldos, contudo o contrato é diferente.
</p>
<div class="sourceCodeDisplay">
<pre class="brush: java; highlight: [];" name="source">

public interface BalanceResolver {
	
	public Money balanceFor(Account account, Date date);

}

</pre>
<div class="legend">
		Código 2: </div>
</div>
<p align="justify">
O objetivo do padrão <span class="pattern">Adapter</span> é criar um objeto com este contrato, mas que se utiliza do objeto anterior.
</p>
<div class="sourceCodeDisplay">
<pre class="brush: java; highlight: [];" name="source">

public class BalanceCalculatorAdapter implements  BalanceResolver{
	
	BalanceCalculator original;
	
	public BalanceCalculatorAdapter(BalanceCalculator original, Locale locale){
		this.original = original;
		this.locale = locale;
	}
	
	public Money balanceFor(Account account, Date date) {
	
		Calendar calendar = Calendar.getInstance(locale);
		calendar.setTime(date);
	
		return Money.valueOf(
			original.calculateBalance(account.getId(), calendar),
			Currency.getCurrency(locale)
		)
	
	}

}

</pre>
<div class="legend">
		Código 3: </div>
</div>
<p align="justify">
Este é um exemplo simplificado. Pode ser necessário adaptar também exceções que o objeto original lança e que o novo não. 
Pode ser necessário realizar algumas ações extra, como no caso em precisamos do <code>Locale</code> correto para podermos criar o <code>Calendar</code> e o <span class="pattern">Money</span>.
</p>
<p align="justify">
O importante é que é agora possível utilizar o objeto <code>BalanceCalculator</code> onde for possível usar um <code>BalanceResolver</code>.
</p>

<h2 class="ttl">Padrões relacionados</h2>
<p align="justify">
O padrão <span class="pattern">Adapter</span> se relaciona a padrões como <span class="pattern">Decorator</span> e <span class="pattern">Proxy</span> e existe alguma semelhança entre as implementações. 
O padrão mais fácil de confundir com <span class="pattern">Adapter</span> é o <span class="pattern">Proxy</span>. Enquanto o Adapter visa apenas traduzir contratos entre o cliente e o objeto final o Proxy visa poder interferir entre a chamada do cliente 
e a execução do objeto real. Normalmente sem, sequer, alterar o contrato no caminho.
</p>
<p align="justify">
<span class="pattern">Decorator</span> não visa traduzir contratos mas aumentar o numero de operações possíveis com base num tipo previamente existente. 
Ou seja, o <span class="pattern">Decorator</span> cria um contrato que não existia antes por adição a um contrato base. 
</p>
<p align="justify">
<span class="pattern">Adapter</span> comunica apenas com um outro objeto e nunca com um conjunto de objetos. Se isso acontecer  estaremos na presença de um <span class="pattern" ref="facade">Façade</span> que visa simplificar a utilização de um conjunto de
 objetos encapsulando as operações mais comuns com esses objetos. Embora esteja sendo feita uma tradução de contratos, <span class="pattern" ref="facade">Façade</span> vai um pouco mais além introduzindo uma lógica de cooperação 
 entre os objetos chamados.
</p> 
<p align="justify">
<table>
	<tr>
		<th>Padrão</th>
		<th>Mapeia Contratos </th>
		<th>Altera Contrato</th>
		<th>Adiciona lógica</th>
		<th>Comunica com mais que um objeto</th>
	</tr>
	<tr>
		<td>Adapter</td>
		<td>X</td>
		<td/>
		<td/>
		<td/>
	</tr>
	<tr>
		<td>Decorator</td>
		<td>X</td>
		<td>X</td>
		<td/>
		<td/>
	</tr>
	<tr>
		<td>Proxy</td>
		<td>X</td>
		<td/>
		<td>X</td>
		<td/>
	</tr>
	<tr>
		<td>Façade</td>
		<td>X</td>
		<td>X</td>
		<td>X</td>
		<td>X</td>
	</tr>
</table> 
</p>

</div>
</div>
<div class="references">
<h3 class="ttl">Referências</h3>
<table class="referencetable">
<tr>
<td align="center" valign="top">
				[1]
				</td>
<td align="left" valign="top">
<strong>Design Patterns: Elements of Reusable Object-Oriented Software</strong>
<br/>
<i/>
<br/>
				Livro:<a href="/library/books/gof-design-patterns.html" title="Design Patterns: Elements of Reusable Object-Oriented Software">Design Patterns: Elements of Reusable Object-Oriented Software</a>
<br/>
<p/>
</td>
</tr>
</table>
</div>
</div>
