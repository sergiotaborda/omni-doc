<document>

<properties>
	<title>Nomenclatura</title>
</properties>

<references>
	<ref id="1" >
		<title>Clean Code: A Handbook of Agile Software Craftsmanship</title>
		<book>clean-code-a-handbook-of-agile-software-craftsmanship</book>
	</ref>
	<ref id="2" >
		<title>Code Complete</title>
		<book>code-complete</book>
	</ref>
	<ref id="3" >
		<title>JavaBeans Tecnology</title>
		<url>http://java.sun.com/products/javabeans/docs/spec.html</url>
	</ref>
	<ref id="4">
		<title>Code Conventions for the JavaTM Programming Language: Naming Conventions</title>
		<url>http://java.sun.com/docs/codeconv/html/CodeConventions.doc8.html</url>
	</ref>
	<ref id="5">
		<title>Effetive Java</title>
		<book>effective-java</book>
	</ref>
</references>

<body>

<section name="Nomenclatura" >
<p>
A escrita de código passa inevitávelmente por criar nomes. Nomes de classes, de métodos e de variáveis.
Práticamente todo o codigo que escrevemos que não é uma palavra reservada da linguagem é um nome que tivemos que 
criar em algum momento, ou o nome que alguem já criou. Porque tanto do código é um nome é útil e conveniente ter uma 
politica de nomenclatura.
</p>
<p>
Nomes cuidadosamente escolhidos tornam o código mais legivel não apenas do ponto de vista da lingua, mas também do propósito. 
Ao ser mais claro o propósito apenas pela leitura do código diminui a necessidade de comentários que expliquem o que o codigo faz.
Pela diminuição de comentários, e clareza do codigo ele é a sua própria melhor documentação.
</p>
<p>
O objetivo de uma politica de momenclatura é escolher certas regras que se seguidas, não importa por quem, produzem um nome legivel, 
com significado e com a mesma estrutura. Para escolher entre as regras temos que saber quais principios elas devem obdecer, pois se 
criarmos uma regra de nomenclatura contrária a estes principios, estaremos complicando o processo de criar nomes e não simplificando-o. 
</p>
</section>
<section name="Principios de Nomenclatura">
	<section name="Expresse intenções" >
		<p>
		A primeira coisa que um nome deve fazer é nomear. Ou seja, identificar verbalmente algo.
		Esta identificação deve trazer à mente de quem lê uma imagem e partiular, no código, o nome deve revelar
		a intenção por detrás daquele artefato (classe, método, variável, etc...) <ref id="1"/><ref id="2"/>.
		</p>
		<p>
		O nome deve ser claro, simples e único. Claro significa que não ha ambiguidade na identificação do nome com um, e apenas um, conceito.
		 Simples significa que o nome deve ser composto do minimo de palavras possivel sem que obscureça o significado. Idealmente deve ser
		 composto de apenas uma palavra. Único significa que o nome deve ser usado apenas para referir um único conceito no sistema.  
		</p>
		<p>
		Criar um nome único depende da lingua natural em que os nomes são escolhidos. 
		</p>
	</section>
	<section name="Facilite a comunicação">
		<p>
		Se nomeiamos uma coisa é porque gostariamos de nos referir a ela no futuro apenas usando o nome. Gostariamos também
		que as outras pessoas entendessem ao que estamos nos referindo, apenas dizendo o nome. Para isto o nome tem que ser pronunciável.
		Nomes que são conjuntos de letras e nomes como a1 e bc3to onde somos obrigados a pronunciar as letras e os numeros um por um, são exemplo
		de maus nomes.
		</p>
		<p>
		Outro fator que dificulta a pronunica é a utilização de prefixos sem significado como começar todas as variáveis internas com <estrang>underline</estrang>
		ou o uso da Notação Hungara, muito famosa nos anos 70 em linguagens  com modelos de tipos  pouco definidos ou voláteis demais.
		</p>
		<p>
		Outro fator que pode atrapalhar a comunicação é o uso de nomes com apenas uma letra como <emph>a</emph> ou <emph>b</emph>.
		Esta regra pode ser quebrada se estamos usando as letras i,j ou k como contado, pois pela tradição todos acabam entendendo
		que se trata de uma variável burucrática de iteração. Outro ponto onde usar uma só letra é quando estamos resolvendo um problema 
		matemático onde o uso de x, y e z é facilmente entendivel. 
		</p>
		<p>
		Para facilitar a comunicação os nomes não devem ter segundos significados, ou significados engraçados para a equipa e não devem ser 
		usados sinónimos espertinhos em vez da palavra que seria esperada. Por exemplo um método que faz a aplicação terminar deve se chamar "terminar"
		e não "daOFora".
		</p>
	</section>
	<secition name="Preferência de Dominio Tecnico" >
		<p>
		Em caso de duvida, ambiquidade ou dificuldade em encontrar um nome, nomes que estão relacionados aos conceitos tecnicos usados no design 
		devem ser preferidos. Em outras palavras nomes do dominio da solução devem ser preferidos a nomes do dominio do problema <ref id="1" />.
		A razão para isto é que quem irá ler o código é um outro programador. Como programador ele terá que entender o propósito da classe apenas
		conhecendo o seu nome. Se usamos nomes do dominio do problema, o programador pode não estar familizado com o problema e portanto não entender
		o que está sendo feito pelo codigo.  
		</p>
		<p>
		Esta regra não é aplicável, obviamente, a classes que apenas existem como representações do dominio do problema; especialmente entidades.
		</p>
		<p>
		Esta regra é util para poder reaproveitar nomes fácilmente usando nomes de padrões de projeto. Por exemplo um <code>ServiceRegestry</code> é 
		uma classe que segue o padrão <pattern>Registry</pattern> e é usada para guardar e recuperar serviços. 
		</p>
	</secition>
</section>
<section name="Estilos de escrita" >
	<p>
	Todos os nomes devem seguir o padrão CamelCase em que as palavras são aglutinadas sem espaços ou sinais não alfabéticos. As palavras são diferenciadas
	colocando a primeira letra em caixa alta. 
	</p>
	<p>
	Nomes de tipos ( interface, interfaces, enumerações e anotações) devem seguir o estilo CamelCase com a primeira letra da palavra grifada maisucla.
	</p>
	<p>
	Nomes de métodos ou variáveis devem seguir o estilo CamelCase em que a primeira letra é grifada em minuscula. 
	</p>
	<p>
	Nomes de pacotes são escritos sempre em minuscula, com as várias partes que compoem o nome separadas por ponto final (.). Cada parte do nome
	é formada apenas por uma única palavra.
	</p>
	<p>
	Abreviações não devem ser utilizadas na formação de nenhum nome. Existem algunas exceções como a abreviação Id que usadas tradicionalmente, mas como regra
	abreviações não devem ser usadas. Nomes devem ser completos e fácilmente legiveis, abreviações não cooperam com estes principios <ref id="5"/>.
	</p>
	<p>
	Siglas como HTTP, URL e AJAX (entre outro) devem seguir o estilo de caixa normal como se fossem palavras, por exemplo um método acessor que recupere um URL seria
	<code>getUrl()</code> <ref id="5"/> e não <code>getURL</code>. A API Java padrão não adota uma politica especifica para estes casos. Por um lado termos a classe
	<class>HttpServlet</class> e por outro as classes <class>URL</class> e  <class>URLConnection</class>  demonstrando uma falta ou falha nas regras de nomenclatura.
	Com certeza um exemplo a não seguir. 
	</p>
</section>
<section name="Nomeando Pacotes" >
	<p>
	A plataforma de desenvolvimento não força regras para a nomenclatura de pacotes, contudo é recomendado que os nomes sejam escolhidos tal que o pacote
	seja universalmente único <ref id="4" />. Para alcançar este objetivo é normalmente usado um caminho de  dominio invertido como por exemplo <code>com.javabuilding</code>
	como pacote principal. O pacote principal é seguido do nome do projeto/aplicação. Dentro de pacote da aplicação são criados os pacotes
	para as partes da aplicação conforme o design utilizado. 
	</p>
	<p>
	Nomes dos pacotes internos da aplicação devem expressar o propósito das classes lá dentro da forma mais simples possivel. Por exemplo, um pacote chamado 
	<code>org.enterprise.app.validation</code> deverá conter classes que auxiliam a validação. Nomes de pacotes não devem ser usados para separar 
	entres camadas ou andares da sua aplicação. Podem ser usados em casos especiais para separar entre nodos como <code>org.enterprise.app.server</code> e
	<code>org.enterprise.app.client</code>.
	</p>
</section>
<section name="Nomeando Classes">
	<p>
	Os nomes das classes devem ser substantivos que designam o conceito ou a responsabilidade que a classe ocupa no sistema.
	Os nomes devem ser especificos o suficiente para estarem relacionados ao problema ou à solução e nomes genéricos como coleção, dados,
	informações, controlador ou processador, por exemplo.
	</p>
	<p>
	Nomes de classes podem ter prefixo ou sufixos que tentam orientar o programador sobre o nivel que a classe ocupa em uma hierarquia
	ou no design do sistema. Contudo prefixo ou sufixo que não adicionem informação devem ser evitados. Por exemplo, chamar um classe de NotafiscalPOJO ou
	NotaFiscalBean não faz sentido pois já é sabido que essas classes serão beans e <wiki>POJO</wiki>s.
	Especialmente classes que representam entidades do dominio como Cliente, Produto, Uusuario, não precisam de qualquer afixo.
	</p>
	<p>
	Outro prefixo que é inutil é um que identifique a aplicação <ref id="1" />. 
	Isso deve ser feito pelo nome de pacote da classe e não pelo nome da classe em si.
	</p>
</section>
<section name="Nomeando Interfaces">
	<p>
	As regras de nomenclatura  de interfaces devem seguir os mesmos principios das regras para classes. A única diferença é que podemos
	escolher não apenas substantivos, mas também adjetivos e advérbios.
	</p>
	<p>
	Muitos gostam de prefixar suas interfaces com um I maiusculo. Esta prática não é recomendada <ref id="1"/> por violar explicitamente o
	encapsulamento fornecendo informação demais. Além disso, se nos arrependemos depois e quizermos mudar para uma classe essa mudança
	irá provocar uma refactoramento desnecessário do codigo inteiro e até de código cliente já escrito por outras pessoas. 
	</p>
</section>
<section name="Nomeando Classes Abstractas e Implementações">
	<p>
	A nomenclatura para classes abstratas é a mesma que para classes normais e interfaces normalmente adicionada do prefixo <emph>Abstract</emph>.
	Este recurso é especialmente importante no desenvolvimento de API de uso geral onde os elementos principais são definidos como interfaces
	e classes abstratas são implementadas para fornecer implementações padrão para a maior parte dos métodos da interface. O prefixo <emph>Abstract</emph>
	não é usado para significar que a classe precisa ser implementada, mas sim para posicionar a classe num nivel superior da hierarquia de classes (logo abaixo de interfaces,
	e acima de classes comuns). O prefixo <emph>Abstract</emph> no nome não força que a classe seja abstracta de fato ( marcada com <keyword>abstract</keyword>), contudo,
	o fato da classe ser marcada com <keyword>abstract</keyword> força que o nome seja prefixado com <emph>Abstract</emph>. 	
	</p>
	<p>
	A nomenclatura para implementações de classes abstratas ou interfaces segue a regra de usar o mesmo nome da classe/interface pai com um prefixo ou sufixo que a destingua
	como sendo a implementação. É comum utilizar o sufixo "impl" para designar a implementação. Contudo esta não é uma boa prática, pois no momento que queremos uma implementação 
	diferente não mais podemos usar esse prefixo e muito menos podemos usar prefixos como "impl2".  Além disso o uso do prefixo "impl" viola o principio da Facilidade de Comunicação
	ao forçar a pronunica de um afixo abreviado e sem dar informação sobre no que aquela implementação é diferente das outras.
	</p>
	<p>
	Prefixos e sufixos de implementações devem explicitar a forma em que aquela implementação é especifica e diferente das outras. Normalmente este afixo está relacionado ao 
	algoritmo ou à tecnologia usada internamente naquela implementação. Exemplos classicos são <code>ArrayList</code> que é a implementação de <code>List</code> usando um array, ou 
	<code>TreeSet</code> que é a implementação de <code>Set</code> usando um algorimo de arvore binária. 
	</p>
	<p>
	Quando estamos implementando uma interface ou classe abstrata mas não conseguimos ver à partida várias opções de implementação afixos como "Simples" e "Default" 
	são comuns; como em <code>SimpleDateFormat</code> e <code>DefaultTableModel</code>).
	</p>
</section>
<section name="Nomeando métodos e construtores">
	<p>
	Nomes de métodos devem ser verbos ( enviar, pagar, ...) com a 
	possibilidade de serem compostos com adverbios ou substantivos relativos ao papel dos argumentos ( enviarProposta, pagarImpostos )
	Métodos que representem acessores ou modificadores devem seguir a nomenclatura JavaBeans <ref id="3" /> começando com o prefixo <code>get</code> (acessor)
	ou com <code>set</code> (modificador). 
	Nomes de métodos devem expresar a ação que será realizada ou a mudança de estado que se espera que aconteça. 
	</p>
	<p>
	Construtores são obrigados a ter o mesmo nome da classe (pelo menos em Java e C#) o que significa que se o construtor tiver parametros não temos como oferecer um
	auxiliar semantico para o significado de cada um. Neste caso é conveniente declarar métodos estáticos corretamente nomeados quen informem o propósito dos argumentos
	e deixar os construtores com parametros privados seguindo o padrão <pattern>Static Method Factory</pattern>. 
	</p>
</section>
<section name="Nomeando Exceções" >
	<p>
	Os nomes devem revelar a causa da exceção e devem terminar com o sufixo que representa a sua hirarquia de 
	exceção: <code>Exception</code> ou <code>Error</code>. Por exemplo, em <code>ArithemeticException</code>
	sabemos que se trata de uma classe derivada de  <code>Exception</code>, e não de  <code>Error</code>, que foi causada por
	algum problema em uma operação aritmética.
	</p>
</section> 
<section name="Modelos de Momenclatura" >
	<p>
	Algumas classes com utilidade especifica têm formas especificas de serem nomeadas. A seguir são listados alguns modelos 
	de nomenclatura para estes conjuntos de classes, baseados nas regras anteriores. 
	</p>
	<section name="Entidades">
		<p>
		O nome de uma entidade é uma exceção ao principio de Preferência de Dominio Tecnico. Nomes de entidades não devem conter sufixo ou prefixos
		de nenhum tipo, nem mesmo o popular <emph>Entity</emph>. Nomes de entidades, são exactamente isso, nomes. Substantivos que são reconhidos do dominio
		do problema e que normalmente guiam o objetivo ou a operação do software. 
		</p>
	</section>
	<section name="Repositório">
		<p>
		A nomenclatura do padrão <pattern>Repository</pattern> seguue o modelo: <code>[Entidade]Repository</code>.	
		</p>
		<p>
		Esta nomenclatura segue o principio de Preferência de Dominio Tecnico deixando o nome do padrão no fim do nome. 
		O nome é precedido pelo nome da entidade a que este repositorio se refere.
		</p>
	</section>
	<section name="Servico" >
		<p>
		O padrão <pattern>Service</pattern> tem duas peças: a interface do serviço e a implementação do serviço. 
		A nomenclatura para a interface do padrão <pattern>Service</pattern> segue o modelo: <code>[Proposito]Service</code>.	
		Esta nomenclatura segue o principio de Preferência de Dominio Tecnico deixando o nome do padrão no fim do nome. 
		O nome é precedido pela descrição do proposito em forma resumida, por exemplo: <code>EmailSendingService</code>.
		</p>
		<p>
		O nome da implementação do serviço segue o modelo: <code>[Tecnologia][Proposito]Service</code>, em que ao nome da 
		interface do serviço é adicionado um prefixo que denota o tipo de tecnologia ou algoritmo que o serviço utiliza 
		para satisfazer a interface, por exemplo: <code>JavaMailEmailSendingService</code>  
		</p>
	</section>
	<section name="DAO">
		<p>
		O padrão <pattern ref="dao" >DAO</pattern>, semelhante ao padrão <pattern>Service</pattern> tem duas peças: 
		a interface do serviço/estratégia e a implementação. Para classes de <pattern ref="dao" >DAO</pattern> associados a entidades, o nome da entidade é 
		adicinado como prefixo para destinguir entre os contratos de cada entidade. O nome da interface segue o modelo 
		<code>[Entidade]DAO</code> e o da implementação o modelo: <code>[Tecnologia][Entidade]DAO</code>.
		Esta nomenclatura segue o principio de Preferência de Dominio Tecnico deixando o nome do padrão no fim do nome. 
		</p>
		<p>
		O nome da implementação começa com o nome da tecnologia de persistência que a implementação do <pattern ref="dao" >DAO</pattern> usa, seguindo pelo nome da 
		interface que está sendo implementada, por exemplo <code>JdbcCustomerDAO</code>.
		</p>
	</section>
</section>
<section name="Inglês vs Português" >
	<p>
	Muito do conceito de linguagem de programação é baseado na ideia de escrever o mais próximo da linguagem natural possivel. 
	Acontece que esta lingua é normalmente o inglês. Por isso que as palavras reservadas são em inglês. A ideia é que se misturem bem
	com o resto dos nomes para prover uma leitura o mais fluida possivel. É esta leitura fluida que promove a melhor documentação e 
	o código mais limpo <ref id="2"/>.  
	</p>
	<p>
	O problema acontece quando a lingua natural do programador não é o inglês. Um programador cuja lingua natural não é o inglês 
	terá o entendimento do código dificuldado à partida pois a leitura não mais é fluida. Mesmos assim, é possivel adaptar regras de 
	nomenclatura especificas à lingua natural e ter os mesmos beneficios que antes. Todos excepto um: quem não souber ler aquele 
	lingua não entenderá o código. 
	O problema não é apenas para quem tem o Português como lingua natural, mas para todos aqueles que têm uma lingua natural
	diferente do inglês. Por exemplo, o japonês. Embora java aceite codigo fonte em UTF-16 (permitindo assim a escrita de caracteres janoneses)
	apenas programadores que saibam ler e dominem o idioma podem entender o codigo.  
	</p>
	<p>
	Existem ocasiões em que obrigatoriamente teremos que usar o inglês. Afinal, o inglês é a lingua franca <emph>de fato</emph> em programação.
	Isto acontece sempre que precisamos partilhar o codigo com outras pessoas em outros paises ou culturas. Projetos Open Source são um exemplo.
	Projetos em Outsource são outro. Na realidade existem poucos exemplos de quando o seu código não seria partilhado com pessoas de outros paises 
	ou culturas.
	</p>
	<p>
	Deve estar pensando que a sua aplicação é muito simples, que você vai vendê-la para um só cliente e nunca sairá das fronteiras do seu pais
	ou do seu controle. Isso pode ser verdade durante a vida inicial do software, mas se ele durar, se houver necessidade de dar manutenção, 
	se você quiser ganhar mais dinheiro comercializando o fonte ou se simplesmente quiser fazer <estrang>outsource</estrang>, ou open source, 
	do desenvolvimento porque os custos estão muito caros... você não poderá. Escrever código em uma lingua natural que não o inglês limita 
	automaticamente a evolução, expansão e vida util do seu software. 
	</p>
	<p>
	Um detalhe que leva muita gente a não escrever em inglês é achar que certos conceitos são muito particulares da cultura e não podem ser 
	expressos em inglês (como por exemplo o CPF ou o CNPJ).
	Então, mesmo quando escrevendo o resto do aplicativo em inglês é comum ver classes do dominio com nomes na lingua natural do programador. 
	Isto é um problema porque esses nomes não traduzem o conceito, violando diretamente o principio de Expressar Intensão. 
	Ele é o nome dado no dominio do problema a um certo conceito. Porque o programador, não sabe ou não consegue abstrair
	esse conceito ele não consegue atribuir outro nome além daquele que conhece na sua lingua natural. Ao abstrair o conceito, 
	é mais fácil encontrar um equivalente em inglês.  Por exemplo, o CPF e o CNPF representam  apenas um conceito: o numero de 
	indentificação tributário. Que podemos facilmente nomear em inglês como TributaryIdentificationNumber ou TaxIdentificationNumber ( numero de identificação para pagamento de impostos).
	</p>
	<p>
	Não é necessário que o nome em inglês seja a tradução direta porque isso pode causar outros problemas relativamente ao dominio. Por exemplo, nos EUA, os impostos são 
	identificados usando o Social Security Number, que é o mesmo numero que a pessoa usa para se identificar em outras agencias do 
	governo, não apenas a que recolhe os impostos e faz, para essa entidade o mesmo papel que o RG. Portanto, tentar a tradução direta é muitas vezes um erro em si mesmo 
	porque não ha uma contraparte na cultura inglesa. Por isso temos que nos concentrar em criar um nome, e não em traduzir. 
	Por exemplo, boletos bancários são uma prática que não existe fora do Brasil assim como não existem no Brasil a prática de emitir 
	<a href="http://en.wikipedia.org/wiki/Cashier's_check">Cashier's Checks</a>. Boleto bancário é, assim, intradutivel diretamente. Contudo, atendendo ao conceito facilmente 
	podemos criar o nome de <estrang>PrintableBankCreditTitle</estrang> (Titulo impresso de crédito bancário).
	</p>
	<p>
	Analizar o nome do conceito na sua lingua natural e tentar passá-lo para o inglês o ajudará a criar maior poder de abstração e um maior poder de abstração
	o poderá ajudar a modelar orientado a objetos de uma forma mais simples e natural. Por outro lado, ao abstrair o conceito você pode ver novas hierarquias de objetos e classes
	que ajudarão a simplificar o seu modelo e o seu software.
	</p>
	<p>
	Ninguém o vai impedir de criar nomes em linguas naturais diferentes do inglês, mas tenha em mente que ao fazer essa escolha estará inveitávelmente restringindo a evolução do software que está escrevendo.
	</p>
</section>
</body>
</document>